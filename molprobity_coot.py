# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  27 ', 'LEU', 0.04045158172935452, (37.009, 12.565, 12.991)), ('A', '  28 ', 'MET', 0.028460634587680254, (36.43, 9.693, 10.546)), ('A', '  50 ', 'ASP', 0.01686093547256626, (42.978, 29.294, -6.321)), ('A', '  54 ', 'LEU', 0.013626625832325467, (47.940000000000005, 24.028000000000002, 3.737)), ('A', '  64 ', 'PHE', 0.027771884009668086, (42.734, 19.321, 17.97)), ('A', '  68 ', 'GLU', 0.02212160042448185, (42.05, 28.175, 20.302999999999994)), ('A', '  90 ', 'VAL', 0.0, (31.853000000000005, 7.568000000000001, 21.71)), ('A', '  93 ', 'TRP', 0.004887390179077878, (32.854, 12.811000000000002, 23.282)), ('A', ' 106 ', 'ASN', 0.00239528185809902, (35.615, 31.64, 17.076)), ('A', ' 109 ', 'SER', 0.009897547325293944, (29.095, 28.443000000000005, 10.251)), ('A', ' 114 ', 'CYS', 0.013336650873758515, (25.92, 12.677, 9.446)), ('A', ' 122 ', 'TYR', 0.04023921105267969, (23.211, 16.853, 20.861)), ('A', ' 126 ', 'GLY', 0.011076782271248517, (20.118999999999996, 19.26000000000001, 23.753999999999994)), ('A', ' 127 ', 'VAL', 0.06541725369678798, (18.365, 17.141, 21.104999999999993)), ('A', ' 128 ', 'GLN', 0.0371130966003688, (18.666999999999998, 13.564000000000002, 22.283)), ('A', ' 135 ', 'LYS', 0.010152724948090422, (15.72, -1.667, 9.524)), ('A', ' 145 ', 'ARG', 0.02136171630104337, (9.891000000000002, 22.65, 3.3019999999999996)), ('A', ' 149 ', 'VAL', 0.0, (17.290000000000003, 30.405000000000005, 3.902999999999999)), ('A', ' 151 ', 'LEU', 0.04770559460764633, (22.06, 28.123, 2.515)), ('A', ' 153 ', 'GLN', 0.00984068996453836, (20.307000000000002, 29.510000000000005, -2.619)), ('A', ' 157 ', 'GLU', 0.018864772245661233, (11.912000000000004, 22.724, -4.6)), ('A', ' 164 ', 'SER', 0.03299909296885547, (22.714, 7.085, 2.874)), ('A', ' 184 ', 'ALA', 0.04439663094939584, (14.801000000000004, 19.914, 4.173)), ('A', ' 194 ', 'VAL', 0.0, (18.523, 22.298, 11.056)), ('A', ' 196 ', 'GLY', 0.08354597446990852, (22.06, 26.552, 14.1)), ('A', ' 197 ', 'GLN', 0.049541339184330575, (21.749, 30.148, 15.195)), ('A', ' 209 ', 'GLU', 0.006850204800257842, (29.318, 14.642, 1.094)), ('A', ' 211 ', 'SER', 0.02279075002024328, (29.299, 9.666, -2.126)), ('A', ' 218 ', 'GLU', 0.0, (29.578, 0.565, 0.223)), ('A', ' 219 ', 'TYR', 0.023531683405224015, (26.969000000000005, -2.243, -0.06)), ('A', ' 225 ', 'LYS', 0.001868892448200734, (27.304000000000002, -11.051, 6.051)), ('A', ' 226 ', 'GLY', 0.0111503, (25.203, -8.107, 7.3199999999999985)), ('A', ' 239 ', 'ASP', 0.0021046984015269067, (17.226, -2.548, -8.757)), ('A', ' 244 ', 'LYS', 0.008260320638374436, (27.328000000000003, 2.7010000000000005, -11.009999999999996)), ('A', ' 245 ', 'PRO', 0.0, (23.685, 4.013, -10.6)), ('B', ' 108 ', 'THR', 0.01704872439481183, (35.715, 24.056, -15.527)), ('D', ' 207 ', 'HIS', 0.006555388933454151, (41.461, 40.692, -16.278))]
data['omega'] = [('A', '  80 ', 'ALA', None, (31.03, 8.764, 10.407)), ('A', ' 170 ', 'ARG', None, (17.836, 11.138000000000003, 14.036))]
data['rota'] = [('A', '  24 ', 'ILE', 0.2792884316315859, (38.238, 20.061, 7.877)), ('A', '  27 ', 'LEU', 0.04336660342686897, (37.009, 12.565, 12.991)), ('A', '  35 ', 'GLU', 0.018074719288192605, (39.252, 14.04, 1.8659999999999997)), ('A', '  39 ', 'LEU', 0.005555318423107743, (37.944, 18.875, -0.816)), ('A', '  51 ', 'VAL', 0.07475624230263307, (42.377, 26.952, -3.296)), ('A', '  56 ', 'MET', 0.0, (52.20900000000001, 23.665, 8.664)), ('A', '  64 ', 'PHE', 0.014152268719682093, (42.734, 19.321, 17.97)), ('A', '  66 ', 'ASP', 0.12110246378338972, (46.506, 25.001, 19.705)), ('A', '  84 ', 'THR', 0.14354056832984552, (25.915, 2.6990000000000003, 17.31)), ('A', '  89 ', 'GLU', 0.000752266277152012, (30.262, 7.841, 25.212)), ('A', '  95 ', 'GLU', 0.0029286457582748753, (37.509, 16.500000000000007, 23.576)), ('A', ' 102 ', 'TYR', 0.20793257601368278, (35.115, 25.949000000000005, 20.897)), ('A', ' 105 ', 'THR', 0.08553281914396486, (32.969, 30.967000000000002, 19.744)), ('A', ' 107 ', 'VAL', 0.0, (34.028, 29.859, 14.058999999999996)), ('A', ' 108 ', 'THR', 0.02343297916713747, (31.43400000000001, 31.191, 11.643)), ('A', ' 111 ', 'LEU', 0.005620793316272591, (29.030000000000005, 22.324, 8.919)), ('A', ' 113 ', 'ILE', 0.07722604642167653, (28.066000000000003, 15.771, 8.634)), ('A', ' 139 ', 'VAL', 0.03422017790089574, (19.351, 8.116, -2.05)), ('A', ' 140 ', 'PHE', 0.06789876907718768, (16.195, 10.003, -1.083)), ('A', ' 148 ', 'HIS', 0.03302164841889151, (14.625, 32.39, 1.898)), ('A', ' 158 ', 'LEU', 0.08117968035859284, (11.763, 18.961, -4.504)), ('A', ' 160 ', 'PHE', 0.19335083476529868, (17.166, 14.468999999999998, -4.29)), ('A', ' 174 ', 'ILE', 0.27784716853236785, (13.70300000000001, 18.811, 16.48)), ('A', ' 177 ', 'VAL', 0.06586435191965924, (14.331, 23.859, 19.879)), ('A', ' 179 ', 'GLU', 0.04780619879592968, (17.165999999999993, 27.762000000000004, 17.415)), ('A', ' 191 ', 'VAL', 0.0366197159341415, (20.511, 16.182, 3.907)), ('A', ' 197 ', 'GLN', 0.06106903907739772, (21.749, 30.148, 15.195)), ('A', ' 201 ', 'GLN', 0.03490971867160477, (26.086000000000002, 25.316, 12.954)), ('A', ' 205 ', 'LEU', 0.08964864808104783, (22.474, 14.350999999999999, 8.469)), ('A', ' 215 ', 'LEU', 0.1223831196902137, (30.769000000000002, 5.641, -2.778)), ('A', ' 220 ', 'GLU', 0.0, (29.785, -4.705, -0.9079999999999999)), ('A', ' 222 ', 'ASP', 0.09957973780983774, (28.620000000000005, -4.799, 4.575)), ('A', ' 224 ', 'ASP', 0.060530286489221444, (30.970000000000002, -9.923, 6.278)), ('A', ' 227 ', 'LEU', 0.17534982399406276, (21.61, -9.046, 6.406)), ('A', ' 229 ', 'ILE', 0.2078316695003754, (21.892, -4.745, 3.448)), ('A', ' 238 ', 'HIS', 0.0011748631769944351, (15.965000000000002, -1.145, -12.16)), ('A', ' 261 ', 'LEU', 0.03408129981449644, (30.808, 28.877, 1.552))]
data['cbeta'] = [('A', '  50 ', 'ASP', ' ', 0.2997853073269972, (44.38, 28.776000000000003, -6.738)), ('A', '  66 ', 'ASP', ' ', 0.2672866352186442, (47.779, 24.627, 18.898)), ('A', '  98 ', 'ARG', ' ', 0.2735364512050438, (36.618, 20.561000000000007, 24.76)), ('A', ' 106 ', 'ASN', ' ', 0.29228249491634434, (37.01, 31.642, 17.75)), ('A', ' 148 ', 'HIS', ' ', 0.3224209314148326, (14.558999999999997, 33.694, 2.746)), ('A', ' 188A', 'UNK', ' ', 0.2529041221397417, (13.934000000000001, 13.258000000000001, 6.629999999999999)), ('A', ' 190A', 'UNK', ' ', 0.3414006447082531, (16.549, 14.944, 4.756)), ('A', ' 247 ', 'VAL', ' ', 0.30383701623789605, (24.887000000000004, 10.337, -9.589)), ('D', ' 207 ', 'HIS', ' ', 0.41889912471093, (43.022, 40.682, -16.162))]
data['probe'] = [(' A 140  PHE  HE2', ' A 188  GLU  HB3', -1.145, (14.213, 6.475, 4.243)), (' A 140  PHE  CE2', ' A 188  GLU  HB3', -1.056, (14.407, 7.145, 3.406)), (' A 190A UNK  C  ', ' A 193  LEU HD11', -0.89, (19.287, 16.305, 5.807)), (' A  80  ALA  HB2', ' A 115  TRP  HB2', -0.853, (27.805, 9.711, 11.946)), (' A 191  VAL  CG2', ' A 208  SER  HB2', -0.837, (22.746, 15.782, 1.152)), (' A 191  VAL HG21', ' A 208  SER  HB2', -0.834, (23.229, 14.98, 0.601)), (' A  80  ALA  CB ', ' A 115  TRP  HB2', -0.833, (28.521, 9.127, 11.563)), (' A 135  LYS  HG3', ' A 136  MET  H  ', -0.826, (16.691, -0.725, 6.686)), (' A 190A UNK  O  ', ' A 193  LEU HD11', -0.806, (19.488, 15.493, 6.356)), (' A 226  GLY  O  ', ' A 229  ILE HG12', -0.799, (23.787, -7.565, 4.073)), (' A 159  PHE  HB2', ' A 252  HIS  CE1', -0.794, (17.442, 18.815, -5.882)), (' A 208  SER  C  ', ' A 210  TYR  H  ', -0.763, (27.118, 14.127, -0.612)), (' A 235  TYR  O  ', ' A 245  PRO  HB3', -0.746, (21.346, 3.408, -9.143)), (' A 236  PHE  HA ', ' A 245  PRO  HG3', -0.746, (22.565, 2.086, -9.192)), (' A 193  LEU  HB3', ' A 194  VAL HG22', -0.744, (18.813, 19.627, 10.047)), (' A  52  HIS  NE2', ' A  54  LEU  HA ', -0.73, (48.452, 24.808, 2.043)), (' A 208  SER  O  ', ' A 210  TYR  N  ', -0.698, (28.29, 14.684, -1.266)), (' A 103  SER  OG ', ' A 110  THR HG21', -0.697, (31.696, 24.809, 14.415)), (' A  95  GLU  HA ', ' A  98  ARG  HG2', -0.691, (37.456, 18.439, 23.771)), (' A 232  PRO  HB2', ' A 235  TYR  HB3', -0.661, (21.575, 1.837, -4.61)), (' A  92  TYR  HB3', ' A  95  GLU  OE1', -0.635, (37.752, 13.372, 20.988)), (' A  48  GLN  HG2', ' A  51  VAL HG22', -0.634, (39.619, 27.959, -5.415)), (' A 135  LYS  HG3', ' A 136  MET  N  ', -0.598, (16.937, -0.933, 7.649)), (' A 235  TYR  CE2', ' A 245  PRO  HG2', -0.595, (24.954, 2.39, -6.878)), (' A 190  GLY  HA3', ' A 193  LEU HD21', -0.594, (17.915, 16.029, 9.41)), (' A 100  MET  HE1', ' A 119  ALA  CB ', -0.592, (29.063, 16.133, 17.232)), (' A 143  GLU  HG3', ' A 158  LEU HD12', -0.578, (8.523, 18.756, -1.975)), (' A  48  GLN  HA ', ' E   6  UNK  O  ', -0.564, (39.216, 31.266, -3.939)), (' A 100  MET  HE1', ' A 119  ALA  HB1', -0.563, (29.281, 15.972, 17.733)), (' A 252  HIS  HA ', ' A 255  LEU  HB2', -0.552, (23.171, 21.229, -4.674)), (' A 103  SER  HA ', ' A 107  VAL  CG2', -0.545, (33.8, 26.878, 16.108)), (' A 103  SER  HA ', ' A 107  VAL HG23', -0.533, (33.453, 26.891, 16.608)), (' A 170  ARG  H  ', ' A 189  ALA  HB1', -0.529, (18.065, 11.449, 12.61)), (' A 151  LEU  HA ', ' A 259  ASN  HB3', -0.528, (23.07, 28.067, 1.158)), (' A 163  HIS  HA ', ' A 206  GLY  HA2', -0.511, (21.739, 11.25, 4.783)), (' A 139  VAL  HA ', ' A 162  PRO  HA ', -0.51, (20.209, 9.698, -0.856)), (' A 221  ARG  HA ', ' A 223  ARG  HE ', -0.509, (32.862, -4.812, 1.602)), (' D 206  GLY  O  ', ' D 207  HIS  CG ', -0.505, (42.591, 39.612, -14.626)), (' A 138  GLY  HA3', ' A 233  LYS  HD3', -0.498, (18.103, 3.35, 2.031)), (' A 125  TYR  CD1', ' A 179  GLU  HG3', -0.498, (19.58, 25.325, 19.367)), (' A  80  ALA  HB2', ' A 115  TRP  CB ', -0.489, (28.435, 10.124, 11.964)), (' A 224  ASP  O  ', ' A 225  LYS  HB3', -0.489, (28.687, -12.556, 6.481)), (' A 140  PHE  CD1', ' A 233  LYS  HE3', -0.486, (15.562, 6.958, -0.016)), (' A 140  PHE  CE1', ' A 233  LYS  HE3', -0.484, (15.75, 6.506, 0.153)), (' A 237  LYS  C  ', ' A 239  ASP  H  ', -0.479, (17.975, -1.269, -11.378)), (' A  76  ILE HG12', ' A 111  LEU HD23', -0.479, (31.438, 20.522, 6.172)), (' A  26  ASN  HA ', ' A  78  THR HG21', -0.479, (36.892, 14.099, 9.087)), (' A 105  THR  OG1', ' A 106  ASN  N  ', -0.479, (35.004, 31.646, 19.117)), (' A  24  ILE HG23', ' A  76  ILE  HB ', -0.476, (35.264, 19.296, 6.837)), (' A 163  HIS  HA ', ' A 206  GLY  CA ', -0.473, (21.219, 11.669, 4.568)), (' A  92  TYR  O  ', ' A  94  GLU  N  ', -0.466, (34.689, 13.569, 23.963)), (' A 125  TYR  O  ', ' A 127  VAL  N  ', -0.464, (19.988, 18.66, 21.41)), (' A 139  VAL HG22', ' A 216  LYS  NZ ', -0.461, (21.308, 6.102, -3.599)), (' A 150  LYS  C  ', ' A 152  LEU  H  ', -0.461, (20.718, 29.347, 1.026)), (' A 148  HIS  CG ', ' A 149  VAL  N  ', -0.458, (15.571, 32.465, 3.569)), (' A 208  SER  C  ', ' A 210  TYR  N  ', -0.457, (28.173, 13.85, -0.322)), (' A  67  ILE HG22', ' A 102  TYR  OH ', -0.457, (40.318, 26.894, 15.837)), (' A 164  SER  HB3', ' A 207  HIS  HB2', -0.454, (24.839, 9.074, 3.119)), (' A  27  LEU  C  ', ' A  29  PRO  HD3', -0.449, (37.58, 10.479, 12.437)), (' A  38  LEU HD22', ' A  76  ILE HD13', -0.446, (33.788, 19.42, 4.385)), (' A 190A UNK  O  ', ' A 193  LEU  CD1', -0.445, (19.938, 16.278, 6.771)), (' A 167  THR  O  ', ' A 167  THR HG22', -0.442, (20.85, 1.815, 12.93)), (' A 114  CYS  O  ', ' A 117  ALA  HB3', -0.44, (25.164, 13.967, 11.452)), (' A  24  ILE HG12', ' A  76  ILE HD12', -0.438, (36.467, 20.804, 5.075)), (' A 180  LEU HD21', ' A 203  PHE  HE2', -0.434, (21.502, 22.527, 15.316)), (' A 133  LYS  NZ ', ' A 169  VAL HG11', -0.433, (14.207, 7.435, 12.04)), (' A  93  TRP  C  ', ' A  97  LYS  HG2', -0.433, (32.635, 14.738, 24.335)), (' A 130  TYR  CB ', ' A 131  PRO  CD ', -0.425, (15.762, 8.918, 18.725)), (' A 235  TYR  CZ ', ' A 245  PRO  HG2', -0.422, (24.815, 3.132, -6.846)), (' A 100  MET  HE1', ' A 119  ALA  HB3', -0.42, (28.965, 15.705, 16.907)), (' A  99  ILE  HA ', ' A 102  TYR  HB3', -0.42, (36.493, 23.154, 20.542)), (' A 190A UNK  C  ', ' A 193  LEU  CD1', -0.413, (19.164, 16.668, 6.194)), (' A 138A UNK  HA ', ' A 216  LYS  HD3', -0.412, (22.458, 4.522, -0.547)), (' A 193  LEU  O  ', ' A 194  VAL  C  ', -0.411, (20.058, 22.784, 9.525)), (' A 193  LEU HD13', ' A 205  LEU  H  ', -0.41, (20.952, 16.704, 7.713)), (' A  37  GLN  HA ', ' A  40  ARG HH21', -0.409, (34.219, 13.6, -2.858)), (' A 190  GLY  HA3', ' A 193  LEU  CD2', -0.404, (17.745, 16.501, 9.68)), (' A 180  LEU HD22', ' A 194  VAL  HB ', -0.404, (19.396, 22.648, 13.673)), (' A  23  ALA  O  ', ' A  75  LEU  HA ', -0.401, (36.262, 23.414, 9.117))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
